<?php
/**
* @file
* A description of what your module does.
*/

define('GF_USER_ROLE_MANAGER_GARDENER_ID', 18);
define('GF_USER_ROLE_WHOLESALE_CUSTOMER_ID', 19);

// Название полей с валютой в таблице uc_orders.
define('GF_UC_ORDERS_CURRENCY_RUB', 'RUB');
define('GF_UC_ORDERS_CURRENCY_CNY', 'CNY');


/**
 * Implements hook_menu().
 */
function gf_discount_menu() {
  $items = [];
  // Страница настроек модуля.
  $items['admin/config/gf-discount'] = [
    'title' => 'GF-Discount ',
    'description' => 'Gf-Discount module settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['gf_discount_settings_form'],
    'access arguments' => ['administer discounts'],
    'file' => 'gf_discount.admin.inc',
  ];
  $items['admin/config/gf-discount/newbie'] = array(
    'title' => 'Newbie Discount',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -1,
  );
  $items['admin/config/gf-discount/roles'] = [
    'title' => 'Discount for roles',
    'description' => 'Setting up discounts for custom roles',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['gf_discount_roles_settings_form'],
    'access arguments' => ['administer discounts'],
    'file' => 'gf_discount.admin.inc',
    'type' => MENU_LOCAL_TASK,
  ];
  $items['admin/config/gf-discount/last-month-sum'] = [
    'title' => 'Previous Month Based',
    'description' => 'Discounts(temporary discount roles) based on the amount spent by a customer in the previous month.',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['gf_discount_montly_settings_form'],
    'access arguments' => ['administer discounts'],
    'file' => 'gf_discount.admin.inc',
    'type' => MENU_LOCAL_TASK,
  ];
  return $items;
}

/**
 * Implements hook_permission().
 */
function gf_discount_permission() {
  return array(
    'administer discounts' => array(
      'title' => t('Administer discounts'),
      'description' => t('Allows configuration of discounts.'),
    ),
    'use newbie discounts' => array(
      'title' => t('Use newbie discounts'),
      'description' => t('Use discounts for newbie'),
    ),
    'use role discounts' => array(
      'title' => t('Use role discounts'),
      'description' => t('Use discounts for a roles'),
    ),
  );
}

/**
 * Implements hook_uc_cart_alter().
 */
function gf_discount_uc_cart_alter(&$items) {
  $base_discount = gf_discount_get_discount_all($items);

  foreach ($items as $key => $item) {
    $item_discount = $base_discount;

    if (isset($item->field_discount['und'])) {
      $tid = $item->field_discount['und'][0]['tid'];
      $discount_term = taxonomy_term_load($tid);
      $item_discount += (int) $discount_term->name; // процент за акционный товар
    }

    if ($item_discount) {
      $current_price = $item->price;
      $items[$key]->price = $items[$key]->sell_price = $current_price - (
        ($current_price / 100) * $item_discount);
    }
  }
}

/**
 * Проверка на пользователя-новичка(еще не делал заказов).
 *
 * @return bool
 *   Возвращаем единичку, если заказов еще не было.
 */
function gf_discount_check_newbie($uid=NULL) {
  if (is_null($uid)) {
    global $user;
    $uid = $user->uid;
  }

  if ($uid < 2) return; // Юзер 1 нам тоже не интересен.
  $result = db_query('SELECT 1 FROM {uc_orders} WHERE uid = :uid',
    [':uid' => $uid])->fetchField();

  return !$result;
}


/**
 * Получаем общую сумму заказа в рублях.
 *
 * @param array $cart_items
 * @return int
 */
function gf_discount_get_cart_total_sum_rub($cart_items) {
  $sum = 0;
  foreach($cart_items as $item) {
    $rub_price = (isset($item->gf_region_prices[GF_STOCK_REGION_RU])) 
      ? $item->gf_region_prices[GF_STOCK_REGION_RU] : $item->price; 
    $sum += $item->qty * $rub_price;
  }
  return $sum;
}


/**
 * Получаем дисконт для новочела.
 *
 * @param array $cart_items
 *   массив с элементами корзины
 * @param int $uid
 * @return int
 *   вовращаем процент скидки, или ноль, если не положено
 */
function gf_discount_get_discount_newbie($cart_items, $user=NULL) {
  if (is_null($user)) {
    global $user;
  }
  // На получение скидки у пользователя должно быть разрешение.
  if (!user_access('use newbie discounts', $user)) return 0;

  $discount = 0;
  $is_newbie = gf_discount_check_newbie($user->uid);

  if (!$is_newbie) 
    return $discount;

  $cart_total = gf_discount_get_cart_total_sum_rub($cart_items) / 1000;
  $newbie_discounts = variable_get('gf_discount_newbie_discounts', []);
  krsort($newbie_discounts, SORT_NUMERIC); // сортируем по нисходящей

  foreach(array_keys($newbie_discounts) as $sum) {
    if ($cart_total >= $sum) {
      $discount = $newbie_discounts[$sum];
      break;
    }
  }

  if ($discount && !isset($_SESSION['gf_discount_newbie_msg_shown'])) {
    // Если скидка есть, радуем пользователя сообщением, как ему повезло.
    $msg = t('You received a promotional discount of !percent % on all products in your shopping cart',
    ['!percent' => $discount]);
    drupal_set_message($msg);
    $_SESSION['gf_discount_newbie_msg_shown'] = TRUE;
  }

  return $discount;
}


/**
 * Собираем все скидки одной функцией.
 *
 * @return int
 */
function gf_discount_get_discount_all($items) {
  $discount = 0;
  // Получаем скидку(в процентах) для "новичка".
  $discount += gf_discount_get_discount_newbie($items);
  // Десятипроцентная скидка для пользователей определенных блатных ролей.
  $discount += (user_has_role(GF_USER_ROLE_MANAGER_GARDENER_ID) 
    or user_has_role(GF_USER_ROLE_WHOLESALE_CUSTOMER_ID)) ? 10 : 0;
  // Получаем скидку для ролей.
  $discount += gf_discount_get_discount_role();

  return $discount;
}


/**
 * Получение скидки для роли.
 *
 * @param array $roles
 * @return int
 */
function gf_discount_get_discount_role($roles=NULL) {
  if (is_null($roles)) {
    global $user;
    $roles = $user->roles;
  }

  $role_discounts = variable_get('gf_discount_role_discounts', []);

  if ($roles && $role_discounts) {
    $slice = array_intersect_key($role_discounts, $roles);
    // Суммируем скидки для ролей, если есть такое указание 
    // в настройках.
    $summarize = variable_get('gf_discount_summarize_discounts', FALSE);
    if ($summarize){
      return array_sum($slice);
    } // иначе - возвращаем самую большую скидку.
    else {
      return max($slice);
    }
  }

  return 0;
}

/**
 * Получаем сумму, на которую пользователь назаказывал в прошлом месяце. 
 * Без привязки к конкретной валюте, но по-умолчанию завязываемся на рубли.
 * 
 * @param int $uid
 * @param string $output_currency
 * @return int
 */
function gf_discount_get_customer_last_month_sum($uid, $output_currency=GF_UC_ORDERS_CURRENCY_RUB){
  $sum = 0;
  $excluded_statuses = ['abandoned', 'canceled', 'in_checkout'];

  $q = db_select('uc_orders', 'o')->fields('o', ['currency']);
  $q->addExpression('SUM(order_total)', 'sum');
  // $q->addExpression('MONTH(FROM_UNIXTIME(o.created))', 'month');
  $q->condition('o.uid', $uid);
  $q->condition('o.order_status', $excluded_statuses, 'NOT IN');
  $q->where('MONTH(FROM_UNIXTIME(o.created)) = (MONTH(NOW()) - 1)'); 
  $q->groupBy('o.currency');

  $result = $q->execute()->fetchAll();

  if ($result) {
    // Исходим из того, что у пользователя могли быть заказы
    // в различных валютах.
    foreach($result as $data) {
      if ($data->currency == $output_currency) {
        $sum += $data->sum;
      }
      elseif (in_array($data->currency, 
        [GF_UC_ORDERS_CURRENCY_RUB, GF_UC_ORDERS_CURRENCY_CNY])) {
        // Убеждаемся, что нам не пришла какая-то левая строка, и
        // преобразуем сумму в нужную валюту. Модулем gf_stock у нас текущий курс
        // юаня к рублю сохраняется в соответствующей переменной.
        $yuan_erate = variable_get('gf_stock_yuan_exchange_rate');
        $sum += ($data->currency == GF_UC_ORDERS_CURRENCY_CNY) ? 
          ($data->sum * $yuan_erate) : ($data->sum / $yuan_erate);
      }
    }
  }

  return $sum;
}


/**
 * Implements hook_cron().
 *
 */
function gf_discount_cron(){
  // Ежемесячные мероприятия, инициируемые модулем.
  $current_month = date('m', REQUEST_TIME);
  $last_run = variable_get('gf_discount_monthly_events_lastrun', $current_month);
  // Сравниваем значение текущего месяца со значением
  // переменной, где записан месяц последнего запуска нужных нам процессов.
  if($last_run == ($current_month - 1)){
    gf_discount_assigning_roles();
    // Пишем в переменную-индикатор последнего запуска значение текущего месяца.
    variable_set('gf_discount_monthly_events_lastrun', $current_month);
  }
}


/**
 * Назначение временных дисконтных ролей
 * по результатам предыдущего месяца.
 *
 * @return void
 */
function gf_discount_assigning_roles() {
  $settings = variable_get('gf_discount_montly_sum_roles_discount', []);
  if (!$settings) return;
  krsort($settings, SORT_NUMERIC); // Крупные суммы - выше.
  $roles_store = []; // Закрепляем пользователей за ролями.

  $query = db_query("SELECT DISTINCT r.uid FROM users_roles r
    JOIN role_permission p ON r.rid = p.rid
    WHERE r.uid > 1
    AND p.module = :module
    AND p.permission = :perms", [
      ':module' => 'gf_discount', 
      ':perms' => 'use role discounts']);



  $expiry_timestamp = strtotime(variable_get('gf_discount_roles_expire', '1 month'));

  foreach ($query->fetchAll() as $result) {
    $uid = $result->uid;
    $sum = gf_discount_get_customer_last_month_sum($uid);

    if ($sum <= 0) continue;
    foreach($settings as $key_sum => $role_id) {
      list($min, $max) = explode(':', $key_sum); // $key_sum == 'min_num:max_num'
      if (($sum >= $min) && ($sum <= $max)) {
        $roles_store[$role_id][] = $uid;
        // Делаем запись в таблицу модуля role_expire, что бы роль у
        // пользователя была отозвана по истечении настроенного времени.
        role_expire_write_record($uid, $role_id, $expiry_timestamp);
        break;
      }

    }
  }

  if ($roles_store) {
    // По результатам наполнения массива с ролями
    // и соответствующими им пол-ми присваимваем пол-лям дисконтные роли.
    foreach($roles_store as $role => $users) {
      user_multiple_role_edit($users, 'add_role', $role);
    }
  }

  return;
}
